name: 05-Destroy Azure infrastructure

on:
  workflow_dispatch:

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout and actions/pull

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_USE_OIDC: true

jobs:
  destroy-k8s-resources:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repo
      uses: actions/checkout@v2
  
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Set AKS context
      id: set-context
      uses: azure/aks-set-context@v3
      with:
        resource-group: 'automate-all-the-things-overload-andrei' 
        cluster-name: 'automation-andrei'

    - name: Setup kubectl
      id: install-kubectl
      uses: azure/setup-kubectl@v4

    # Before deleting all Ingresses we delete all ArgoCD applications because if we don't, it will re-deploy the Ingresses, automatically creating untracked AWS Application Load Balancers, which would mess with the terraform destroy  
    - name: Delete applications & ArgoCD
      run: | 
        # We delete app of apps application
        kubectl delete -n argocd applications.argoproj.io argocd-app-of-apps

        # We also need to remove the finalizers from the Kiali CR for deletion to be successful, it's a known issue (https://kiali.io/docs/installation/installation-guide/install-with-helm/#known-problem-uninstall-hangs-unable-to-delete-the-kiali-cr)
        kubectl patch kiali kiali -n service-mesh -p '{"metadata":{"finalizers": []}}' --type=merge

        # We delete every other application
        kubectl delete -n argocd applications.argoproj.io --all

        helm uninstall -n argocd argocd

  # Before deleting all infra we make sure there are no existing ingresses so the terraform destroy isn't messed up by the existance of untracked AWS Application Load Balancers
    - name: Delete ingresses
      run: | 
        kubectl delete ingress --all --all-namespaces

    # We also delete all EBS volumes created through Persistent Volumes
    - name: Delete Persisten Volumnes
      run: | 
        kubectl delete persistentvolumeclaims --all --all-namespaces
        kubectl delete persistentvolumes --all --all-namespaces

  destroy-infra:
    runs-on: ubuntu-latest
    needs: destroy-k8s-resources
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.0"

      - name: Terraform init Backend
        run: terraform init -force-copy
        working-directory: terraform/azure

      - name: Terraform apply actual infrastructure
        run: terraform destroy -auto-approve
        working-directory: terraform/azure